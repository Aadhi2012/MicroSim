//    *******  IMPORTANT   *********** 
//    Do not edit this file alone, GEdata_writer_CL.py output is
//    written to this file based on line replacements.  
//    If you edit this file, take appropriate actions in GEdata_writer_CL.py


void CL_thermo_function_calls() { 
  
  int ip;
  FILE *fp; 
  char name[1000];
  char string[10000];
  
  sprintf(name, "solverloop/GibbsEnergyData2.h"); 
  fp = fopen(name, "w"); 
  
  fprintf(fp, "//    *******  IMPORTANT   *********** \n");
  fprintf(fp, "//    Do not edit this file alone, GEdata_writer_CL.py output is \n");
  fprintf(fp, "//    written to this file based on line replacements.  \n");
  fprintf(fp, "//    If you edit this file, take appropriate actions in GEdata_writer_CL.py \n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  
  fprintf(fp, "#pragma OPENCL EXTENSION cl_khr_fp64 : enable\n\n"); 
//   fprintf(fp, "#include "ThermoCL.c"\n");
//   fprintf(fp, "#include "ThermoCL.h"\n");
  
  fprintf(fp, "void Ge(double T, double *y, double *Ge, int tpha);\n");
  fprintf(fp, "void Mu(double T, double *y, double *MU, int tpha);\n");
  fprintf(fp, "void dMudc(double T, double *y, double *Dmudc, int tpha);\n");
  
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  
  ///// Generate ge functions 
  fprintf(fp, "void Ge(double T, double *y, double *Ge, int tpha) { \n");
  
  fprintf(fp, "\n");
  
  for ( ip = 0; ip < NUM_THERMO_PHASES; ip++ ) { 
    if ( ip == 0 ) { 
      fprintf(fp, "  if ( tpha == %d ) { \n    GE_%d(T, y, Ge); \n  }\n", ip, ip); 
    }
    else {
      fprintf(fp, "  else if ( tpha == %d ) { \n    GE_%d(T, y, Ge); \n  }\n", ip, ip); 
    }
  }
  fprintf(fp, "  else { \n");
  //sprintf(string, "    printf(\" Mismatch in number of phases and tdb phases \\n\");");
  //fprintf(fp, "%s\n", string);
  fprintf(fp, "    printf(\" Mismatch in number of phases and tdb phases \\n\"); \n");
  fprintf(fp, "    printf(\" No thermodynamic data is obtained \\n\"); \n");
  fprintf(fp, "  }\n");
  
  fprintf(fp, "\n}\n"); 
  
  fprintf(fp, "\n\n");
  
  ///// Generate mu functions 
  fprintf(fp, "void Mu(double T, double *y, double *MU, int tpha) { \n");
  
  fprintf(fp, "\n");
  
  for ( ip = 0; ip < NUM_THERMO_PHASES; ip++ ) { 
    if ( ip == 0 ) { 
      fprintf(fp, "  if ( tpha == %d ) { \n    Mu_%d(T, y, MU); \n  }\n", ip, ip); 
    }
    else {
      fprintf(fp, "  else if ( tpha == %d ) { \n    Mu_%d(T, y, MU); \n  }\n", ip, ip); 
    }
  }
  fprintf(fp, "  else { \n");
  //sprintf(string, "    printf(\" Mismatch in number of phases and tdb phases \\n\");");
  //fprintf(fp, "%s\n", string);
  fprintf(fp, "    printf(\" Mismatch in number of phases and tdb phases \\n\"); \n");
  fprintf(fp, "    printf(\" No thermodynamic data is obtained \\n\"); \n");
  fprintf(fp, "  }\n");
  
  fprintf(fp, "\n}\n"); 
  
  fprintf(fp, "\n\n");
  
  
  ///// Generate dmudc functions 
  fprintf(fp, "void dMudc(double T, double *y, double *Dmudc, int tpha) { \n");
  
  fprintf(fp, "\n");
  
  for ( ip = 0; ip < NUM_THERMO_PHASES; ip++ ) { 
    if ( ip == 0 ) { 
      fprintf(fp, "  if ( tpha == %d ) { \n    dmudc_%d(T, y, Dmudc); \n  }\n", ip, ip); 
    }
    else {
      fprintf(fp, "  else if ( tpha == %d ) { \n    dmudc_%d(T, y, Dmudc); \n  }\n", ip, ip); 
    }
  }
  fprintf(fp, "  else { \n");
  //sprintf(string, "    printf(\" Mismatch in number of phases and tdb phases \\n\");");
  //fprintf(fp, "%s\n", string);
  fprintf(fp, "    printf(\" Mismatch in number of phases and tdb phases \\n\"); \n");
  fprintf(fp, "    printf(\" No thermodynamic data is obtained \\n\"); \n");
  fprintf(fp, "  }\n");
  
  fprintf(fp, "\n}\n"); 
  
  
  fprintf(fp, "\n");
  fclose(fp);
  
}
 
